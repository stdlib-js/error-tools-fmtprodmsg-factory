{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/defaults.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {string} [options.url] - website URL for full error message\n* @param {string} [options.message] - error message template with `{{url}}` and `{{code}}` placeholders that will be replaced\n* @returns {(Error|null)} error object or null\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'url' ) ) {\n\t\topts.url = options.url;\n\t\tif ( !isString( opts.url ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'url', opts.url ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'message' ) ) {\n\t\topts.message = options.message;\n\t\tif ( !isString( opts.message ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'message', opts.message ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'url': 'https://stdlib.io/docs/api/latest/error-decoder.html',\n\t\t'message': 'Minified stdlib error code: {{code}}. Visit {{url}} for the full message.'\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar replace = require( '@stdlib/string-replace' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function which formats an error message for production.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.url] - website URL for full error message\n* @param {string} [options.message] - error message template with `{{url}}` and `{{code}}` placeholders that will be replaced\n* @returns {Function} error formatting function\n*\n* @example\n* var opts = {\n*     'url': 'https://stdlib.io/error-decoder.html'\n* };\n*\n* var fcn = fmtprodmsgFactory( opts );\n* // returns <Function>\n*/\nfunction fmtprodmsgFactory( options ) {\n\tvar opts;\n\tvar err;\n\topts = defaults();\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\treturn formatProdErrorMessage;\n\n\t/**\n\t* Formats an error message for production.\n\t*\n\t* @private\n\t* @param {string} code - error code\n\t* @param {*} ...args - error message arguments\n\t* @returns {string} formatted error message\n\t*/\n\tfunction formatProdErrorMessage() {\n\t\tvar code = arguments[ 0 ];\n\t\tvar url = opts.url + '?code='+code;\n\t\tvar msg;\n\t\tvar i;\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\turl += '&arg[]=' + encodeURIComponent( arguments[ i ] );\n\t\t}\n\t\tmsg = replace( opts.message, '{{url}}', url );\n\t\tmsg = replace( msg, '{{code}}', code );\n\t\treturn msg;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = fmtprodmsgFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a function which formats an error message for production.\n*\n* @module @stdlib/error-tools-fmtprodmsg-factory\n*\n* @example\n* var fmtprodmsgFactory = require( '@stdlib/error-tools-fmtprodmsg-factory' );\n*\n* var formatProdErrorMessage = fmtprodmsgFactory();\n* // returns <Function>\n*/\n\n// MAIN //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,gCAAiC,EACrDC,EAAa,QAAS,iCAAkC,EACxDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAS,QAAS,uBAAwB,EAe9C,SAASC,EAAUC,EAAMC,EAAU,CAClC,OAAMN,EAAUM,CAAQ,EAGnBL,EAAYK,EAAS,KAAM,IAC/BD,EAAK,IAAMC,EAAQ,IACd,CAACJ,EAAUG,EAAK,GAAI,GACjB,IAAI,UAAWF,EAAQ,8DAA+D,MAAOE,EAAK,GAAI,CAAE,EAG5GJ,EAAYK,EAAS,SAAU,IACnCD,EAAK,QAAUC,EAAQ,QAClB,CAACJ,EAAUG,EAAK,OAAQ,GACrB,IAAI,UAAWF,EAAQ,8DAA+D,UAAWE,EAAK,OAAQ,CAAE,EAGlH,KAdC,IAAI,UAAWF,EAAQ,qEAAsEG,CAAQ,CAAE,CAehH,CAKAP,EAAO,QAAUK,IC9DjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA4BA,SAASC,GAAW,CACnB,MAAO,CACN,IAAO,uDACP,QAAW,2EACZ,CACD,CAKAD,EAAO,QAAUC,ICtCjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,wBAAyB,EAC5CC,EAAW,IACXC,EAAW,IAqBf,SAASC,EAAmBC,EAAU,CACrC,IAAIC,EACAC,EAKJ,GAJAD,EAAOH,EAAS,EACX,UAAU,OAAS,IACvBI,EAAML,EAAUI,EAAMD,CAAQ,GAE1BE,EACJ,MAAMA,EAEP,OAAOC,EAUP,SAASA,GAAyB,CACjC,IAAIC,EAAO,UAAW,CAAE,EACpBC,EAAMJ,EAAK,IAAM,SAASG,EAC1BE,EACA,EACJ,IAAM,EAAI,EAAG,EAAI,UAAU,OAAQ,IAClCD,GAAO,UAAY,mBAAoB,UAAW,CAAE,CAAE,EAEvD,OAAAC,EAAMV,EAASK,EAAK,QAAS,UAAWI,CAAI,EAC5CC,EAAMV,EAASU,EAAK,WAAYF,CAAK,EAC9BE,CACR,CACD,CAKAX,EAAO,QAAUI,IChDjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isString", "format", "validate", "opts", "options", "require_defaults", "__commonJSMin", "exports", "module", "defaults", "require_main", "__commonJSMin", "exports", "module", "replace", "validate", "defaults", "fmtprodmsgFactory", "options", "opts", "err", "formatProdErrorMessage", "code", "url", "msg", "main"]
}
